<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:int="http://www.springframework.org/schema/integration"
    xmlns:jms="http://www.springframework.org/schema/integration/jms"
    xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
    xmlns:int-kafka="http://www.springframework.org/schema/integration/kafka"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop.xsd
               http://www.springframework.org/schema/integration/jms
			   http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
               http://www.springframework.org/schema/integration/stream
               http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
               http://www.springframework.org/schema/integration
			   http://www.springframework.org/schema/integration/spring-integration.xsd
			   http://www.springframework.org/schema/integration/kafka
               http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd">
	
	<context:component-scan base-package="cn.rongcapital.mkt.event.activator"/>
	
	<!-- default poller -->
	<int:poller default="true"  fixed-delay="1000"/>
	
	<int:channel id="eventsSource">
	<int:queue/>
	</int:channel>
	<int:channel id="events">
	<int:queue/>
	</int:channel>
	<int:channel id="systemEvents">
	<int:queue/>
	</int:channel>
	<int:channel id="marketingEvents">
	<int:queue/>
	</int:channel>

     <!--增加监听来达到复制消息功能 -->
     <int:channel id="streamEvents">  
      <int:interceptors>
	     <int:wire-tap channel="marketingEvents"/>
	   </int:interceptors>
     </int:channel>  
 
	 <!--  动态ruter  -->
	<int:router input-channel="events" ref="mcrouter"  default-output-channel="stdErr"  
	method="route">
	 <int:poller max-messages-per-poll="1" task-executor="routeExecutor" fixed-rate="50"/>
	  <int:mapping value="SYSTEM" channel="systemEvents"/>
      <int:mapping value="MARKETING" channel="marketingEvents"/>
      <int:mapping value="STREAM" channel="streamEvents"/>
	</int:router>
	
    <bean id="mcrouter"   class="cn.rongcapital.mkt.event.activator.Roulter"/>
	
	
	
	<!-- event dispatcher -->
	<bean id="eventDispatcherActivator" class="cn.rongcapital.mkt.event.activator.EventDispatcherActivator">
		<property name="channel" ref="eventsSource"/>
	</bean>
	
	<!-- task executors -->
	<bean id="routeExecutor" 
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${event.router.executor.corePoolSize}"/>
		<property name="maxPoolSize" value="${event.router.executor.maxPoolSize}"/>
	</bean>
	<bean id="processExecutor" 
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${event.router.executor.maxPoolSize}"/>
		<property name="maxPoolSize" value="${event.router.executor.maxPoolSize}"/>
	</bean>
	
	
	<bean id="errorExecutor" 
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${event.router.executor.corePoolSize}"/>
		<property name="maxPoolSize" value="${event.router.executor.maxPoolSize}"/>
	</bean>

    
  
    
	<int-stream:stderr-channel-adapter id="stdErr" append-newline="true"/>
	
	 <!-- 默认消息的错误处理 -->
	<bean id="defaultErrorHandServiceActivator" class="cn.rongcapital.mkt.event.activator.DefaultErrorHandlingServiceActivator"/>
	
	
	<!-- actmq start   -->
	
	<bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="${activemq.url}"/>
			</bean>
		</property>
		<property name="sessionCacheSize" value="10"/>
	</bean>
	
	
	
	<!-- 定义队列名称 -->

    <bean id="queue_events" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="queue.events"/>
	</bean>
	
	<bean id="queue_marketingEvents" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="queue.marketingEvents"/>
	</bean>
	
	<bean id="queue_systemEvents" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="queue.systemEvents"/>
	</bean>
	
	
	<bean id="queue_streamEvents" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="queue.streamEvents"/>
	</bean>
	

    <bean id="queue_error" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="queue.error"/>
	</bean>	
	
		
	<jms:outbound-channel-adapter id="toMq" 
	channel="eventsSource" connection-factory="connectionFactory" destination="queue_events"/>
	
	  <!-- stream -->
	 <jms:outbound-channel-adapter id="tostreamMq" 
	channel="streamEvents" connection-factory="connectionFactory" destination="queue_streamEvents"/>

	<jms:inbound-channel-adapter id="torouter" channel="events" connection-factory="connectionFactory" 
	destination="queue_events" />
	
	 <int:channel id="marketingEvents_temp">
		<int:queue />
	 </int:channel>
	
	<jms:outbound-channel-adapter id="toMarkEvent" channel="marketingEvents" connection-factory="connectionFactory" 
	destination="queue_marketingEvents" />


	 <!-- mk处理类 -->
	 
	 <jms:inbound-channel-adapter id="tomkque" channel="marketingEvents_temp" destination="queue_marketingEvents" 
	 connection-factory="connectionFactory" />
	  <int:service-activator ref="marketingEventProcessor" method="process" input-channel="marketingEvents_temp" >
	   <int:poller max-messages-per-poll="1" task-executor="processExecutor" fixed-rate="10"/>
	</int:service-activator>
	<bean id="marketingEventProcessor" class="cn.rongcapital.mkt.event.service.EventMCReceviceProcessorImpl"/>
	
	 <jms:outbound-channel-adapter id="toerror" channel="errorChannel"
	connection-factory="connectionFactory" destination="queue_error"
	/>
	
	 <int:channel id="error_temp">
		<int:queue/>
	 </int:channel>
	 
	 <jms:inbound-channel-adapter id="toerrorque" channel="error_temp"
	 destination="queue_error" connection-factory="connectionFactory"
	 />
	 
	  <int:service-activator  input-channel="error_temp" ref="defaultErrorHandServiceActivator">
	  <int:poller max-messages-per-poll="1" task-executor="errorExecutor" fixed-rate="10"/>
	 </int:service-activator>
	 
	<!-- actmq end  -->
	
	
	
	<!--  kafka 配置  -->
   
    <!--  生成者配置  -->
    
    <int:channel id="inputToKafka">
        <int:queue />
    </int:channel>
    
      
     <bean id="producerProperties"
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="topic.metadata.refresh.interval.ms">-1</prop>
                <prop key="message.send.max.retries">5</prop>
                <prop key="serializer.class">kafka.serializer.StringEncoder</prop>
                <prop key="request.required.acks">1</prop>
                <prop key="value.serializer">org.apache.kafka.common.serialization.ByteArraySerializer</prop>
				<prop key="key.serializer">org.apache.kafka.common.serialization.ByteArraySerializer</prop>
            </props>
        </property>
    </bean> 
    
	
	<bean id="stringSerializer" class="org.apache.kafka.common.serialization.StringSerializer"/>
	<int-kafka:producer-context id="kafkaProducerContext"
        producer-properties="producerProperties">
        <int-kafka:producer-configurations>
            <int-kafka:producer-configuration
                broker-list="10.200.11.36:9092" topic="streamtomc" 
                 key-serializer="stringSerializer"
                 value-serializer="stringSerializer"
                value-class-type="java.lang.String"
               />
        </int-kafka:producer-configurations>
    </int-kafka:producer-context>
	
	
	<int-kafka:outbound-channel-adapter id="kafkaOutboundChannelAdapter"
                                        kafka-producer-context-ref="kafkaProducerContext"
                                        auto-startup="true"
                                        channel="inputToKafka"
                                        order="1"
                                                                            
            >
    <int:poller fixed-delay="1000" time-unit="MILLISECONDS"/>
    </int-kafka:outbound-channel-adapter>
	
	
	
	
	<!-- end -->
	
	<!--  消费者配置 -->
	<int:channel id="inputFromKafka">
        <int:queue/>   
    </int:channel>
	 <bean id="consumerProperties"
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="auto.offset.reset">smallest</prop>
                <prop key="socket.receive.buffer.bytes">10485760</prop> <!-- 10M -->
                <prop key="fetch.message.max.bytes">5242880</prop>
                <prop key="auto.commit.interval.ms">1000</prop>
                <prop key="serializer.class">kafka.serializer.StringEncoder</prop>
            </props>
        </property>
    </bean>
 
     <int-kafka:consumer-context id="consumerContext"
        consumer-timeout="4000" zookeeper-connect="zookeeperConnect" consumer-properties="consumerProperties">
        <int-kafka:consumer-configurations>
            <int-kafka:consumer-configuration
                group-id="mcgroup" max-messages="5000">
                <int-kafka:topic id="streamtomc" streams="4" />
            </int-kafka:consumer-configuration>
            <!-- <int-kafka:consumer-configuration group-id="default3" value-decoder="kafkaSpecificDecoder"
                key-decoder="kafkaReflectionDecoder" max-messages="10"> <int-kafka:topic-filter 
                pattern="regextopic.*" streams="4" exclude="false" /> </int-kafka:consumer-configuration> -->
        </int-kafka:consumer-configurations>
    </int-kafka:consumer-context>
    
    <int-kafka:zookeeper-connect id="zookeeperConnect"
        zk-connect="10.200.11.36:2181" zk-connection-timeout="40000"
        zk-session-timeout="40000" zk-sync-time="200" />
    
	<int-kafka:inbound-channel-adapter
        id="kafkaInboundChannelAdapter" kafka-consumer-context-ref="consumerContext"
         channel="inputFromKafka"  >
        <int:poller fixed-delay="10" time-unit="MILLISECONDS"
            max-messages-per-poll="5" />
    </int-kafka:inbound-channel-adapter> 
	 
	
	 <!-- <int:service-activator  input-channel="inputFromKafka" ref="kfkServiceActivator">
	   <int:poller max-messages-per-poll="1" task-executor="errorExecutor" fixed-rate="10"/> 
	 </int:service-activator>
	
	<bean id="kfkServiceActivator"  class="cn.rongcapital.mkt.event.service.KafKaConsumer"/>  -->
	
	<!--  转换器1  -->
	<int:transformer input-channel="inputFromKafka" 
	output-channel="events"  ref="streamTransformer" method="transformStream"/>
	
	<bean id="streamTransformer" class="cn.rongcapital.mkt.event.activator.StreamTransformer"/>
	
	<!-- 消息增强器(Enricher)2 -->
	<!-- <int:chain input-channel="inputFromKafka" output-channel="events">
	<int:enricher>
   <int:header name="eventCenter.eventType" value="STREAM"/>	
	</int:enricher>
	</int:chain> -->
	
	<!-- end -->
	
	
	
   <aop:aspectj-autoproxy/>	
	
   
    
</beans>